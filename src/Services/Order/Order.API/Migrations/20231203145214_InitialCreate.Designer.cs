// <auto-generated />
using System;
using Inveon.eCommerceExample.Order.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Order.API.Migrations
{
    [DbContext(typeof(OrderContext))]
    [Migration("20231203145214_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Inveon.eCommerceExample.Order.API.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<Guid>("OderId")
                        .HasColumnType("uuid")
                        .HasColumnName("oder_id");

                    b.Property<double>("PaidPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("paid_price");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_id");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("OderId")
                        .HasDatabaseName("ix_items_oder_id");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("Inveon.eCommerceExample.Order.API.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_at");

                    b.Property<double>("PaidPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("paid_price");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_id");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refunded_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Inveon.eCommerceExample.Order.API.Models.Item", b =>
                {
                    b.HasOne("Inveon.eCommerceExample.Order.API.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Inveon.eCommerceExample.Order.API.Models.Order", b =>
                {
                    b.OwnsOne("Inveon.eCommerceExample.Order.API.Models.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("billing_address_city");

                            b1.Property<string>("ContactName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("billing_address_contact_name");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("billing_address_country");

                            b1.Property<string>("Details")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("billing_address_details");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.OwnsOne("Inveon.eCommerceExample.Order.API.Models.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("shipping_address_city");

                            b1.Property<string>("ContactName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("shipping_address_contact_name");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("shipping_address_country");

                            b1.Property<string>("Details")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("shipping_address_details");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.Navigation("BillingAddress")
                        .IsRequired();

                    b.Navigation("ShippingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("Inveon.eCommerceExample.Order.API.Models.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
